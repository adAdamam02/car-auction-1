import os
import sys
import psycopg2
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import login_required, usd, time_format
from crawl import car_info

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Custom filters
app.jinja_env.filters["usd"] = usd
app.jinja_env.filters["time_format"] = time_format

DATABASE_URL = os.environ['DATABASE_URL']
conn = psycopg2.connect(DATABASE_URL, sslmode='require')

@app.route("/")
@login_required
def index():
    try:
        info = car_info()
    except:
        e = sys.exc_info()[0]
        return str(e)

    return render_template('index.html', info=info)

@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        with conn:

            # Ensure username was submitted
            if not request.form.get("username"):
                return "must provide username"

            # Ensure password was submitted
            elif not request.form.get("password"):
                return "must provide password"

            # Query database for username
            with conn.cursor() as cursor:
                cursor.execute("SELECT * FROM users WHERE username = %s", (request.form.get("username"),))
                row = cursor.fetchone()

            # Ensure username exists and password is correct
            if row is None or not check_password_hash(row[2], request.form.get("password")):
                return "invalid username and/or password"

            # Remember which user has logged in
            session["user_id"] = row[0]

            # Redirect user to home page
            return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/login")


@app.route("/register", methods=['GET', 'POST'])
def register():
    if request.method == "POST":
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        with conn:

            username = request.form.get("username")
            password = request.form.get("password")
            confirmation = request.form.get("confirmation")

            with conn.cursor() as cursor:
                cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
                row = cursor.fetchone()

            """Register user"""
            # Ensure username was submitted
            if not username:
                return "must provide username"

            # Checks to see if username has already been used
            elif row is not None:
                return "username has already been used"

            # Ensure password was submitted
            elif not password:
                return "must provide password"

            # makes sure that there was a password confirmation
            elif not confirmation:
                return "must provide confirmation"

            # makes sure that the password equals the confirmation
            elif password != confirmation:
                return "password and confirmation do not match"

            # Generates a hash for the password
            password_hash = generate_password_hash(password)

            # Inserts the user into the users table, saving the autogenerated id in the variable user_id
            with conn.cursor() as cursor:
                cursor.execute("INSERT INTO users (username, hash) VALUES (%s, %s)", (username, password_hash))
                cursor.execute("SELECT id FROM users WHERE username=%s", (username,))
                user_id = cursor.fetchone()[0]

            # Remember which user has logged in
            session["user_id"] = user_id

            return redirect("/")
    else:
        return render_template('register.html')

conn.close()